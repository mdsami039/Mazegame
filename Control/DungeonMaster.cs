///////////////////////////////////////////////////////////
//  DungeonMaster.cs
//  Implementation of the Class DungeonMaster
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2014 10:13:36 PM
//  Original author: Gsimmons
///////////////////////////////////////////////////////////


using System;
using Mazegame.Boundary;
using Mazegame.Entity;
using System.Collections;

namespace Mazegame.Control
{
    public class DungeonMaster
    {
        private IMazeClient gameClient;
        private IMazeData gameData;
        private Player thePlayer;
        private bool continueGame;
        private ArrayList commands;
        private Parser theParser;


        public DungeonMaster(IMazeData gameData, IMazeClient gameClient)
        {
            this.gameData = gameData;
            this.gameClient = gameClient;
            continueGame = true;
            commands = new ArrayList(new string[] { "quit", "move" });
            theParser = new Parser(commands);
        }

        public void PrintWelcome()
        {
            gameClient.PlayerMessage(gameData.GetWelcomeMessage());
        }

        public void SetupPlayer()
        {
            String playerName = gameClient.GetReply("What name do you choose to be known by?");
            thePlayer = new Player(playerName);
            thePlayer.CurrentLocation = gameData.GetStartingLocation();
            gameClient.PlayerMessage("Welcome " + playerName + "\n\n");
            gameClient.PlayerMessage("You find yourself looking at ");
            gameClient.PlayerMessage(thePlayer.CurrentLocation.Description);

        }

        public void RunGame()
        {
            PrintWelcome();
            SetupPlayer();
            while (continueGame)
            {
                continueGame = ProcessPlayerTurn();
            }

        }

        public bool ProcessPlayerTurn()
        {
            ParsedInput userInput = theParser.Parse(gameClient.GetCommand());
            //check if the user has entered a command we recognise
            if (commands.Contains(userInput.Command))
            {
                if (userInput.Command.Equals("quit"))
                    return false;
                if (userInput.Command.Equals("move"))
                {
                    processMove(userInput);
                    return true;
                }
            }
            gameClient.PlayerMessage("We don't recognise that command try again!");
            return true;
        }


        private void processMove(ParsedInput userInput)
        {
            // exit is the first argument in the move command ie: move west
            String exitLabel = (String)userInput.Arguments[0];
            Exit desiredExit = thePlayer.CurrentLocation.GetExit(exitLabel);
            if (desiredExit == null)
            {
                gameClient.PlayerMessage("There is no exit there.. Trying moving someplace moveable!!");
                return;
            }
            thePlayer.CurrentLocation = desiredExit.Destination;
            gameClient.PlayerMessage("You find yourself looking at ");
            gameClient.PlayerMessage(thePlayer.CurrentLocation.Description);
        }

    } //end DungeonMaster
}
